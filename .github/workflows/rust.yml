name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  dist-linux:
    name: Dist (Linux targets)
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux
            arch: x86_64
            use_cross: "false"
          - target: aarch64-unknown-linux-gnu
            os: linux
            arch: aarch64
            use_cross: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross (if needed)
        if: matrix.use_cross == 'true'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build (release)
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package tar.gz
        run: |
          set -e
          BIN="bindery"
          OUT_DIR="target/${{ matrix.target }}/release"
          test -f "$OUT_DIR/$BIN"
          mkdir -p dist
          cp "$OUT_DIR/$BIN" "./$BIN"
          tar -czf "dist/${BIN}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "$BIN"
          rm -f "./$BIN"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.tar.gz
          if-no-files-found: error
          retention-days: 7

  dist-macos-x64:
    name: Dist (macOS x86_64)
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build (release)
        run: cargo build --release --target x86_64-apple-darwin
      - name: Package tar.gz
        run: |
          set -e
          BIN="bindery"
          OUT_DIR="target/x86_64-apple-darwin/release"
          test -f "$OUT_DIR/$BIN"
          mkdir -p dist
          cp "$OUT_DIR/$BIN" "./$BIN"
          tar -czf "dist/${BIN}-darwin-x86_64.tar.gz" "$BIN"
          rm -f "./$BIN"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-x86_64
          path: dist/*.tar.gz
          if-no-files-found: error
          retention-days: 7

  dist-macos-arm64:
    name: Dist (macOS arm64)
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build (release)
        run: cargo build --release --target aarch64-apple-darwin
      - name: Package tar.gz
        run: |
          set -e
          BIN="bindery"
          OUT_DIR="target/aarch64-apple-darwin/release"
          test -f "$OUT_DIR/$BIN"
          mkdir -p dist
          cp "$OUT_DIR/$BIN" "./$BIN"
          tar -czf "dist/${BIN}-darwin-aarch64.tar.gz" "$BIN"
          rm -f "./$BIN"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-aarch64
          path: dist/*.tar.gz
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: [dist-linux, dist-macos-x64, dist-macos-arm64]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*.tar.gz
          generate_release_notes: true
